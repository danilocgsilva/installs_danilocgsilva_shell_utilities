0. Must receive an 'op' parameter (op stands from operation). op can be 'test', what will just return an 'ok' message, so it can confirms that the script was reached. op can be 'fetch', that points that it will make all operarions and also expects another parameter, called 'utility name', that will be what the utility must find.
1. Lists the danilocgsilva repositories with: https://api.github.com/users/danilocgsilva/repos
2. For each repository in the loop, check for presence of programfiles folder. If exists, check inside the programfiles contents if the name of the utility matches with those provided as argument.
3. If exists, recursively navigate to the contents from programfiles folder an creates the files tree in a array. Mount in each line to draw the file path in the local machine.
4. Don't forget to cancel the loop from item 2
5. Outputs the file tree to download and drives the folder creation, of needed.

Loop planning:
Object: creates the file tree to allow shell download and install through local curl. It will crates the file tree since the progrmfiles project folder
1. Get objects from uri like https://api.github.com/repos/danilocgsilva/installs_danilocgsilva_shell_utilities/contents/programfiles?ref=master. Parsed, this is an array of objects.
2. Recursive function:
    -Writes the file paths of all files to output.

    1. Receives an array objects ($object_arrays). Receives also the current path place ($current_path). Naturally, when the loop starts, it will receiva a empty string (""). And by the third parameter, receives the string that will be forged ($forging_string), that must be received as reference.
    2. For each entry in array:
        -If is a regular file, appends it to the $current_path and writes a new line into the $forging_string.
        -If is a folder, make a new curl request to lists the folder contents. Call itself again, providing the folder name as $current_path, the listing fetched from the curl call as $object_arrays and add the same $forging_string.
